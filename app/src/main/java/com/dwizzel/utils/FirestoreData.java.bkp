package com.dwizzel.utils;

import android.support.annotation.NonNull;
import android.util.Log;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;

import com.dwizzel.models.UserModel;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by Dwizzel on 09/11/2017.
 * https://firebase.google.com/docs/firestore/quickstart
 */

public class FirestoreData {

    private final static String TAG = "TheKids.FirestoreData";
    private static FirestoreData sInst;
    private FirebaseFirestore mDb;
    private static Auth sAuth;
    private String mUid;

    private FirestoreData() {
        sAuth = Auth.getInstance();
        mDb = FirebaseFirestore.getInstance();
    }

    public static FirestoreData getInstance() {
        if (sInst == null) {
            sInst = new FirestoreData();
        }
        return sInst;
    }

    public void createNewUser(){
        try{
            createUser();
        }catch (Exception e){
            Log.w(TAG, "createNewUser.Exception: ", e);
        }
    }

    public void createUser() throws Exception{
        Log.w(TAG, "createUser");
        try{
            mUid = sAuth.getUserID();
        }catch (Exception e){
            Log.w(TAG, "createUser.Exception: ", e);
            throw e;
        }
        //use a models
        UserModel user = new UserModel(sAuth.getUserLoginName(), mUid);

        /*
        String email = sAuth.getUserLoginName();
        Map<String, Object> user = new HashMap<>();
        user.put("email", email);
        user.put("uid", mUid);
        */

        //add the new user collection with his id
        mDb.collection("users").document(mUid)
                .set(user)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void avoid) {
                        Log.w(TAG, "document added for " + mUid);
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "addOnFailureListener.Exception: ", e);
                    }
                });
        //create the collection for a new user
        /*
        Map<String, Object> user = new HashMap<>();
        user.put("email", email);
        mDb.collection("users")
                .add(user)
                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                    @Override
                    public void onSuccess(DocumentReference documentReference) {
                        Log.w(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "Error adding document", e);
                    }
                });
        */
    }

    public void getUserinfos() throws Exception{
        Log.w(TAG, "getUserinfos");
        try{
            mUid = sAuth.getUserID();
        }catch (Exception e){
            throw e;
        }

        mDb.collection("users").document(mUid)
                .get()
                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                        Log.w(TAG, "getUserinfos.onComplete");
                        if (task.isSuccessful()) {
                            DocumentSnapshot document = task.getResult();
                            Log.w(TAG, "getUserinfos.document: " +  document.exists());
                            if(document.exists()){
                                Log.w(TAG, "DATA: " + document.getData());
                            }else{
                                Log.w(TAG, "no document, creating new user");
                                //si on a rien alors on le creer
                                createNewUser();
                            }

                        } else {
                            Log.w(TAG, "onComplete.exception: ", task.getException());
                        }
                    }
                });

        /*
        mDb.collection("users")
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        Log.w(TAG, "getUserinfos.onComplete");
                        if (task.isSuccessful()) {
                            if(task.getResult().isEmpty()){
                                Log.w(TAG, "isEmpty: " + task.getResult().isEmpty());
                                //si on a rien alors on le creer
                                try {
                                    createUser();
                                }catch (Exception e){
                                    Log.w(TAG, "Exception: " + e.getMessage());
                                }
                            }else {
                                for (DocumentSnapshot document : task.getResult()) {
                                    Log.w(TAG, document.getId() + " => " + document.getData());
                                }
                            }
                        } else {
                            Log.w(TAG, "Error getting documents.", task.getException());
                        }
                    }
                });
        */

    }

}
